<?php

namespace App\Models {

    /**
     * App\Models\VehicleMaintenance
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property float|null $actual_cost
     * @property \Illuminate\Support\Carbon|null $completed_at
     * @property \Illuminate\Support\Carbon|null $started_at
     * @property mixed $status
     * @property string $vehicle_id
     * @property mixed $maintenance_request_id
     * @property int $id
     * @property-read \App\Models\Vehicle $vehicle
     * @property-read \App\Models\MaintenanceRequest $request
     * @property-read \App\Models\MaintenanceRequest $maintenanceRequest
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\VehicleSupervisorReport> $supervisorReports
     * @property-read int|null $supervisorReports_count
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereMaintenanceRequestId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereVehicleId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereStatus($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereStartedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereCompletedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereActualCost($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance query()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance selectRaw(string $expression)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereNested(string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance addWhereExistsQuery(string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance groupByRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance havingNested(string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance havingNull(array|string $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance havingNotNull(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance havingBetween(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance havingRaw(string $sql, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orHavingRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance beforeQuery()
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance afterQuery()
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static VehicleMaintenance|null find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue()
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance cloneForPaginationCount()
     * @method static array withoutSelectAliases()
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static void enforceOrderBy()
     * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr()
     * @method static mixed doesntExistOr()
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert()
     * @method static int insertOrIgnore()
     * @method static int insertGetId(string|null $sequence)
     * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update()
     * @method static int updateFrom()
     * @method static bool updateOrInsert()
     * @method static int upsert(array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static \Illuminate\Support\Collection getUnionBuilders()
     * @method static mixed getLimit()
     * @method static mixed getOffset()
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance setBindings(string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance mergeBindings()
     * @method static array cleanBindings()
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance clone()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance cloneWithout()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance cloneWithoutBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance wherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance wherePastOrFuture(array|string $columns, string $operator, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereToday(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance orWhereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
     * @method static bool chunk(int $count, callable $callback)
     * @method static mixed chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static mixed lazy(int $chunkSize)
     * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static VehicleMaintenance|null first(array|string $columns)
     * @method static VehicleMaintenance firstOrFail(array|string $columns, string|null $message)
     * @method static VehicleMaintenance sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleMaintenance>|VehicleMaintenance tap(callable $callback)
     * @method static mixed pipe(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class VehicleMaintenance extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\VehicleSupervisorReport
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property string $report_file_path
     * @property string|null $mechanic_info
     * @property string|null $maintenance_notes
     * @property mixed $generated_by
     * @property mixed $vehicle_maintenance_id
     * @property int $id
     * @property-read \App\Models\VehicleMaintenance $vehicleMaintenance
     * @property-read \App\Models\User $supervisor
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereVehicleMaintenanceId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereGeneratedBy($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereMaintenanceNotes($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereMechanicInfo($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereReportFilePath($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport query()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport selectRaw(string $expression)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereNested(string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport addWhereExistsQuery(string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport groupByRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport havingNested(string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport havingNull(array|string $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport havingNotNull(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport havingBetween(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport havingRaw(string $sql, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orHavingRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport beforeQuery()
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport afterQuery()
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static VehicleSupervisorReport|null find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue()
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport cloneForPaginationCount()
     * @method static array withoutSelectAliases()
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static void enforceOrderBy()
     * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr()
     * @method static mixed doesntExistOr()
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert()
     * @method static int insertOrIgnore()
     * @method static int insertGetId(string|null $sequence)
     * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update()
     * @method static int updateFrom()
     * @method static bool updateOrInsert()
     * @method static int upsert(array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static \Illuminate\Support\Collection getUnionBuilders()
     * @method static mixed getLimit()
     * @method static mixed getOffset()
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport setBindings(string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport mergeBindings()
     * @method static array cleanBindings()
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport clone()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport cloneWithout()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport cloneWithoutBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport wherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport wherePastOrFuture(array|string $columns, string $operator, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereToday(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport orWhereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
     * @method static bool chunk(int $count, callable $callback)
     * @method static mixed chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static mixed lazy(int $chunkSize)
     * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static VehicleSupervisorReport|null first(array|string $columns)
     * @method static VehicleSupervisorReport firstOrFail(array|string $columns, string|null $message)
     * @method static VehicleSupervisorReport sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleSupervisorReport>|VehicleSupervisorReport tap(callable $callback)
     * @method static mixed pipe(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class VehicleSupervisorReport extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

    /**
     * App\Models\VehicleType
     *
     * @property \Illuminate\Support\Carbon|null $updated_at
     * @property \Illuminate\Support\Carbon|null $created_at
     * @property string $name
     * @property int $id
     * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\Vehicle> $vehicles
     * @property-read int|null $vehicles_count
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereId($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereName($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereCreatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereUpdatedAt($value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType newModelQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType newQuery()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType query()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType select(array|mixed $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType selectRaw(string $expression)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType fromRaw(string $expression, mixed $bindings)
     * @method static array createSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static array parseSub(mixed $query)
     * @method static mixed prependDatabaseNameIfCrossDatabaseQuery(mixed $query)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType addSelect(array|mixed $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType distinct()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType useIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType forceIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType ignoreIndex(string $index)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
     * @method static \Illuminate\Database\Query\JoinClause newJoinClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Query\JoinLateralClause newJoinLateralClause(string $type, \Illuminate\Contracts\Database\Query\Expression|string $table)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType mergeWheres(array $wheres, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType addArrayOfWheres(array $column, string $boolean, string $method)
     * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
     * @method static bool invalidOperatorAndValue(string $operator, mixed $value)
     * @method static bool invalidOperator(string $operator)
     * @method static bool isBitwiseOperator(string $operator)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereRaw(string $sql, mixed $bindings, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereRaw(string $sql, mixed $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType addDateBasedWhere(string $type, \Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereNested(string $boolean)
     * @method static \Illuminate\Database\Query\Builder forNestedWhere()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereSub(\Illuminate\Contracts\Database\Query\Expression|string $column, string $operator, \Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType addWhereExistsQuery(string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereRowValues(array $columns, string $operator, array $values, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereRowValues(array $columns, string $operator, array $values)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereJsonContains(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereJsonDoesntContain(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereJsonDoesntContain(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereJsonOverlaps(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereJsonDoesntOverlap(string $column, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereJsonContainsKey(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereJsonContainsKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereJsonDoesntContainKey(string $column, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereJsonDoesntContainKey(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereJsonLength(string $column, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType dynamicWhere(string $method, array $parameters)
     * @method static void addDynamic(string $segment, string $connector, array $parameters, int $index)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereFullText(string|string[] $columns, string $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereFullText(string|string[] $columns, string $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType groupByRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \Illuminate\Contracts\Database\Query\Expression|\DateTimeInterface|string|int|float|null $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType havingNested(string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType havingNull(array|string $columns, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orHavingNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType havingNotNull(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orHavingNotNull(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType havingBetween(string $column, string $boolean, bool $not)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType havingRaw(string $sql, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orHavingRaw(string $sql)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType inRandomOrder(string|int $seed)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orderByRaw(string $sql, array $bindings)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType skip(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType offset(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType take(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType limit(int $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType groupLimit(int $value, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType forPage(int $page, int $perPage)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType forPageBeforeId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType forPageAfterId(int $perPage, int|null $lastId, string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
     * @method static array removeExistingOrdersFor(string $column)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType lock(string|bool $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType lockForUpdate()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType sharedLock()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType beforeQuery()
     * @method static void applyBeforeQueryCallbacks()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType afterQuery()
     * @method static mixed applyAfterQueryCallbacks(mixed $result)
     * @method static string toSql()
     * @method static string toRawSql()
     * @method static VehicleType|null find(int|string $id, array|string $columns)
     * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
     * @method static mixed value(string $column)
     * @method static mixed rawValue()
     * @method static mixed soleValue(string $column)
     * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
     * @method static array runSelect()
     * @method static \Illuminate\Support\Collection withoutGroupLimitKeys(\Illuminate\Support\Collection $items)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
     * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static \Illuminate\Support\Collection ensureOrderForCursorPagination(bool $shouldReverse)
     * @method static int getCountForPagination(array $columns)
     * @method static array runPaginationCountQuery(array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType cloneForPaginationCount()
     * @method static array withoutSelectAliases()
     * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
     * @method static void enforceOrderBy()
     * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
     * @method static string|null stripTableForPluck(string $column)
     * @method static \Illuminate\Support\Collection pluckFromObjectColumn(array $queryResult, string $column, string $key)
     * @method static \Illuminate\Support\Collection pluckFromArrayColumn(array $queryResult, string $column, string $key)
     * @method static string implode(string $column, string $glue)
     * @method static bool exists()
     * @method static bool doesntExist()
     * @method static mixed existsOr()
     * @method static mixed doesntExistOr()
     * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
     * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
     * @method static mixed aggregate(string $function, array $columns)
     * @method static float|int numericAggregate(string $function, array $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType setAggregate(string $function, array $columns)
     * @method static mixed onceWithColumns(array $columns, callable $callback)
     * @method static bool insert()
     * @method static int insertOrIgnore()
     * @method static int insertGetId(string|null $sequence)
     * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
     * @method static int update()
     * @method static int updateFrom()
     * @method static bool updateOrInsert()
     * @method static int upsert(array|string $uniqueBy, array|null $update)
     * @method static int increment(string $column, float|int $amount)
     * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int decrement(string $column, float|int $amount)
     * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
     * @method static int delete(mixed $id)
     * @method static void truncate()
     * @method static \Illuminate\Database\Query\Builder newQuery()
     * @method static \Illuminate\Database\Query\Builder forSubQuery()
     * @method static array getColumns()
     * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
     * @method static \Illuminate\Support\Collection getUnionBuilders()
     * @method static mixed getLimit()
     * @method static mixed getOffset()
     * @method static array getBindings()
     * @method static array getRawBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType setBindings(string $type)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType addBinding(mixed $value, string $type)
     * @method static mixed castBinding(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType mergeBindings()
     * @method static array cleanBindings()
     * @method static mixed flattenValue(mixed $value)
     * @method static string defaultKeyName()
     * @method static \Illuminate\Database\ConnectionInterface getConnection()
     * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
     * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType useWritePdo()
     * @method static bool isQueryable(mixed $value)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType clone()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType cloneWithout()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType cloneWithoutBindings()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType dump(mixed ...$args)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType dumpRawSql()
     * @method static void dd()
     * @method static void ddRawSql()
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType wherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWherePast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereNowOrPast(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereNowOrFuture(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType wherePastOrFuture(array|string $columns, string $operator, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereToday(array|string $columns, string $boolean)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereBeforeToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereTodayOrBefore(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereAfterToday(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType orWhereTodayOrAfter(array|string $columns)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType whereTodayBeforeOrAfter(array|string $columns, string $operator, string $boolean)
     * @method static bool chunk(int $count, callable $callback)
     * @method static mixed chunkMap(callable $callback, int $count)
     * @method static bool each(callable $callback, int $count)
     * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
     * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
     * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
     * @method static mixed lazy(int $chunkSize)
     * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
     * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
     * @method static \Illuminate\Support\LazyCollection orderedLazyById(int $chunkSize, string|null $column, string|null $alias, bool $descending)
     * @method static VehicleType|null first(array|string $columns)
     * @method static VehicleType firstOrFail(array|string $columns, string|null $message)
     * @method static VehicleType sole(array|string $columns)
     * @method static \Illuminate\Contracts\Pagination\CursorPaginator paginateUsingCursor(int $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
     * @method static string getOriginalColumnNameForCursorPagination(\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $builder, string $parameter)
     * @method static \Illuminate\Pagination\LengthAwarePaginator paginator(\Illuminate\Support\Collection $items, int $total, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\Paginator simplePaginator(\Illuminate\Support\Collection $items, int $perPage, int $currentPage, array $options)
     * @method static \Illuminate\Pagination\CursorPaginator cursorPaginator(\Illuminate\Support\Collection $items, int $perPage, \Illuminate\Pagination\Cursor $cursor, array $options)
     * @method static \Illuminate\Database\Eloquent\Builder<VehicleType>|VehicleType tap(callable $callback)
     * @method static mixed pipe(callable $callback)
     * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
     * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
     * @method static \Illuminate\Support\Collection explain()
     * @method static mixed forwardCallTo(mixed $object, string $method, array $parameters)
     * @method static mixed forwardDecoratedCallTo(mixed $object, string $method, array $parameters)
     * @method static void throwBadMethodCallException(string $method)
     * @method static void macro(string $name, object|callable $macro)
     * @method static void mixin(object $mixin, bool $replace)
     * @method static bool hasMacro(string $name)
     * @method static void flushMacros()
     * @method static mixed macroCall(string $method, array $parameters)
     * @mixin \Illuminate\Database\Query\Builder
     */
    class VehicleType extends \Illuminate\Database\Eloquent\Model
    {
        //
    }

}